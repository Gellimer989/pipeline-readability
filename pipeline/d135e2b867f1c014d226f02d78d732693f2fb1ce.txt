language: generic
os: linux
dist: xenial

jobs:
  include:
    - &gcc-10
      dist: bionic
      compiler: gcc
      addons:
        apt:
          sources: [ ubuntu-toolchain-r-test ]
          packages: [ g++-10 ]
      env:
        - CXX=g++-10
        - CXXSTD="-std=c++20"

    - <<: *gcc-10
      env:
        - CXX=g++-10
        - CPPFLAGS="-fno-rtti"

    - &clang-11
      dist: bionic
      compiler: clang
      addons:
        apt:
          sources: &clang-11-sources
            - ubuntu-toolchain-r-test
            - sourceline: deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main
              key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
          packages: [ clang-11, g++-10 ]
      env:
        - CXX=clang++-11
        - CXXSTD="-std=c++20"

    - <<: *clang-11
      env:
        - CXX=clang++-11
        - CPPFLAGS="-fms-extensions"

    - <<: *clang-11
      env:
        - CXX=clang++-11
        - CPPFLAGS="-fno-rtti"

#    - &android
#      compiler: clang
#      addons:
#        apt:
#          packages:
#            - openjdk-8-jdk
#      before_install:
#        - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
#        - wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
#        - unzip -qq sdk-tools-linux-4333796.zip -d /opt/android-sdk
#        - rm sdk-tools-linux-4333796.zip
#        - echo "y" | /opt/android-sdk/tools/bin/sdkmanager "platform-tools" "system-images;android-24;default;${ANDROID_ABI}" "platforms;android-24" "emulator" "ndk-bundle" "cmake;3.10.2.4988404" > /dev/null
#      before_script:
#        - export TERM=dumb
#        - export _NO_CHECK_SIGNATURE=true
#        - export ANDROID_SDK_ROOT=/opt/android-sdk
#        - echo no | /opt/android-sdk/tools/bin/avdmanager create avd -n test -k "system-images;android-24;default;${ANDROID_ABI}"
#        - /opt/android-sdk/emulator/emulator -avd test -no-audio -no-window -dns-server 8.8.8.8 &
#        #- android-wait-for-emulator || android-wait-for-emulator
#        - /opt/android-sdk/platform-tools/adb shell input keyevent 82 &
#      script:
#        # Using the ninja build command. Is much faster then make build command.
#        - /opt/android-sdk/cmake/3.10.2.4988404/bin/cmake -H. -Bcmake-build -GNinja -DANDROID_ABI=${ANDROID_ABI} -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=/opt/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=${ANDROID_PLATFORM} -DCMAKE_MAKE_PROGRAM=/opt/android-sdk/cmake/3.10.2.4988404/bin/ninja -DPEGTL_BUILD_EXAMPLES=OFF
#        - /opt/android-sdk/cmake/3.10.2.4988404/bin/cmake --build cmake-build --target all
#        # FIXME android emulator stuck sometimes - cd cmake-build && /opt/android-sdk/cmake/3.10.2.4988404/bin/ctest --output-on-failure
#      env:
#        - ANDROID_ABI=armeabi-v7a
#        - ANDROID_PLATFORM=android-22

#    - <<: *android
#      env:
#        - ANDROID_ABI=armeabi-v7a
#        - ANDROID_PLATFORM=android-24

#    - <<: *android
#      env:
#        - ANDROID_ABI=arm64-v8a
#        - ANDROID_PLATFORM=android-24

    - <<: *gcc-10
      env:
        - CXX=g++-10
        - CPPFLAGS="-fsanitize=undefined -fuse-ld=gold"

    - <<: *gcc-10
      env:
        - CXX=g++-10
        - CPPFLAGS="-fsanitize=address -fuse-ld=gold"

    - <<: *clang-11
      env:
        - CXX=clang++-11
        - CPPFLAGS="-fsanitize=undefined"

    - <<: *clang-11
      env:
        - CXX=clang++-11
        - CPPFLAGS="-fsanitize=address"

    - dist: bionic
      compiler: clang
      addons:
        apt:
          sources: *clang-11-sources
          packages: [ clang-11, clang-tidy-11, g++-10 ]
      env:
        - CXX=clang++-11
        - CLANG_TIDY=clang-tidy-11
      script:
        - make -kj3 clang-tidy

    - dist: bionic
      compiler: clang
      addons:
        apt:
          sources: *clang-11-sources
          packages: [ clang-tools-11, g++-10 ]
      script:
        - scan-build-11 --use-c++=clang++-11 --status-bugs make -kj3

    - dist: bionic
      compiler: gcc
      addons:
        apt:
          sources: [ ubuntu-toolchain-r-test ]
          packages: [ g++-10, valgrind ]
      env:
        - CXX=g++-10
        - SPECIAL=valgrind
      script:
        - make -kj3 valgrind

    - <<: *gcc-10
      env:
        - CXX=g++-10
        - CXXFLAGS="-O0 --coverage"
      before_script:
        - pip install --user cpp-coveralls
      script:
        - make -kj3 check
        - coveralls --gcov gcov-10 --gcov-options '\-lp' --exclude src

    - dist: bionic
      compiler: clang
      addons:
        apt:
          sources: *clang-11-sources
          packages: [ clang-format-11, g++-10 ]
      script:
        - clang-format-11 -i -style=file $(find . -name '[^.]*.[hc]pp')
        - git diff --exit-code

script:
  - $CXX --version
  - make -j3 build/src/test/pegtl/tester
  - build/src/test/pegtl/tester
  - make -kj3
