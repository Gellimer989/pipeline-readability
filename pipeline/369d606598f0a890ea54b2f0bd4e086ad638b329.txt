language: c++

matrix:
  include:
    - os: linux
      compiler: clang
      env: [ CONF_CPP=--enable-cplusplus ]
    - os: linux
      compiler: gcc
      env: [ CONF_CPP=--enable-cplusplus ]
    - os: osx
      env: [ CONF_CPP=--enable-cplusplus ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      compiler: clang
      env: [ CFLAGS_EXTRA="-m32", CONF_ASSERTIONS=--enable-gc-assertions ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      compiler: gcc
      env: [ CFLAGS_EXTRA="-m32", CONF_ASSERTIONS=--enable-gc-assertions ]
    - os: osx
      env:
        - CFLAGS_EXTRA="-m32"
        - CONF_ASSERTIONS=--enable-gc-assertions
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-D CHECKSUMS"
        - CONF_THREADS=--disable-threads
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: clang
      env:
        - CFLAGS_EXTRA="-D DBG_HDRS_ALL -D SHORT_DBG_HDRS"
        - CONF_ASSERTIONS=--enable-gc-assertions
        - CONF_CPP=--enable-cplusplus
    - os: osx
      env:
        - CFLAGS_EXTRA="-D DBG_HDRS_ALL -D SHORT_DBG_HDRS"
        - CONF_ASSERTIONS=--enable-gc-assertions
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-D DEBUG_ADD_DEL_ROOTS -D DEBUG_DIRTY_BITS -D DEBUG_THREADS -D GC_LOG_TO_FILE_ALWAYS"
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-D ENABLE_TRACE -D EMPTY_GETENV_RESULTS -D GC_ALWAYS_MULTITHREADED -D CPPCHECK -D LINT2"
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: clang
      env:
        - CFLAGS_EXTRA="-D GC_BUILTIN_ATOMIC -march=native -D _FORTIFY_SOURCE=2"
        - CONF_CPP=--enable-cplusplus
    - os: osx
      env:
        - CFLAGS_EXTRA="-D GC_BUILTIN_ATOMIC -march=native -D _FORTIFY_SOURCE=2"
        - CONF_CPP=--enable-cplusplus
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      compiler: gcc
      env: [ CFLAGS_EXTRA="-m32 -D MARK_BIT_PER_OBJ" ]
    - os: linux
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-D POINTER_MASK=~0xf"
        - CONF_ASSERTIONS=--enable-gc-assertions
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-D PROC_VDB -D GC_NO_SYS_FAULT_H -D NO_INCREMENTAL"
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-D SMALL_CONFIG -D NO_GETENV"
        - CONF_CPP=--enable-cplusplus
    - os: linux
      addons: { apt: { packages: [ lcov ] } }
      compiler: gcc
      env:
        - CONF_GCOV=--enable-gcov
        - CONF_ASSERTIONS=--enable-gc-assertions
        - CONF_CPP=--enable-cplusplus
        - CONF_M_UNMAP=--enable-munmap
        - CONF_SHARED=--disable-shared
        - CONF_SINGLE_OBJ=--enable-single-obj-compilation
    - os: linux
      compiler: gcc
      env: [ CONF_GC_DEBUG=--enable-gc-debug, CONF_CPP=--enable-cplusplus ]
    - os: linux
      compiler: gcc
      env: [ CONF_GC_DEBUG=--disable-gc-debug, CONF_CPP=--enable-cplusplus ]
    - os: linux
      compiler: clang
      env:
        - CONF_LARGE_CONFIG=--enable-large-config
        - CONF_CPP=--enable-cplusplus
    - os: osx
      env:
        - CONF_LARGE_CONFIG=--enable-large-config
        - CONF_CPP=--enable-cplusplus
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      compiler: gcc
      env: [ CONF_LARGE_CONFIG=--enable-large-config, CFLAGS_EXTRA="-m32" ]
    - os: linux
      compiler: gcc
      env:
        - CONF_LARGE_CONFIG=--enable-large-config
        - CONF_CPP=--enable-cplusplus
        - CONF_M_UNMAP=--enable-munmap
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      compiler: clang
      env:
        - CONF_REDIRECT=--enable-redirect-malloc
        - CFLAGS_EXTRA="-m32"
        - CONF_THREADS=--disable-threads
    - os: osx
      env:
        - CONF_REDIRECT=--enable-redirect-malloc
        - CFLAGS_EXTRA="-m32"
        - CONF_CPP=--enable-cplusplus
        - CONF_THREADS=--disable-threads
    - os: linux
      compiler: gcc
      env:
        - CONF_REDIRECT=--enable-redirect-malloc
        - CONF_GC_DEBUG=--enable-gc-debug
        - CONF_ASSERTIONS=--enable-gc-assertions
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: clang
      env:
        - CONF_STATIC=--disable-static
        - CONF_THREADS=--disable-threads
        - CFLAGS_EXTRA="-O3 -march=native"
        - CONF_CPP=--enable-cplusplus
    - os: linux
      compiler: gcc
      env:
        - CONF_STATIC=--disable-static
        - CONF_THREADS=--disable-threads
        - CFLAGS_EXTRA="-O3 -march=native"
        - CONF_CPP=--enable-cplusplus
    - os: osx
      env:
        - CONF_STATIC=--disable-static
        - CONF_THREADS=--disable-threads
        - CFLAGS_EXTRA="-O3 -march=native"
        - CONF_CPP=--enable-cplusplus
    - os: linux
      env: [ CSA_CHECK=true ]
    - os: linux
      env:
        - CPPCHECK_ENABLE="-j16 --enable=information,performance,portability,style,warning"
      sudo: required
    - os: linux
      env: [ CPPCHECK_ENABLE="--enable=unusedFunction" ]
      sudo: required
    - os: linux
      compiler: clang
      env:
        - MAKEFILE_NAME=Makefile.direct
        - MAKEFILE_EXTRA_TARGETS="check-cpp cord/de"
    - os: linux
      compiler: gcc
      env:
        - MAKEFILE_NAME=Makefile.direct
        - MAKEFILE_EXTRA_TARGETS="check-cpp cord/de"
    - os: osx
      env:
        - MAKEFILE_NAME=Makefile.direct
        - MAKEFILE_EXTRA_TARGETS="check-cpp cord/de"
    - os: linux
      compiler: clang
      env:
        - CFLAGS_EXTRA="-fsanitize=undefined -fno-common -fno-omit-frame-pointer"
        - MSAN_OR_UBSAN=true
        - CONF_CPP=--enable-cplusplus
        - CONF_M_UNMAP=--enable-munmap
# TODO: Add testing with ASan/MSan when clang-3.8 available.

before_install:
  - if [[ "$CPPCHECK_ENABLE" != "" ]]; then
      git clone --depth=3 https://github.com/danmar/cppcheck.git
            ~/cppcheck -b master;
      make --directory ~/cppcheck -j CXXFLAGS="-O3 -march=native -D NDEBUG";
    fi
  - if [[ "$MAKEFILE_NAME" == "" ]]; then
      MAKEFILE_NAME=Makefile;
    fi

install:
  - git clone --depth=50 https://github.com/ivmai/libatomic_ops.git
  - ./autogen.sh
  - if [[ "$CONF_GCOV" == --en* ]]; then
      gem install coveralls-lcov;
    fi

script:
  - if [[ "$CSA_CHECK" != true && "$CPPCHECK_ENABLE" == ""
          && "$MAKEFILE_NAME" != "Makefile.direct" ]]; then
      ./configure $CONF_ASSERTIONS $CONF_CPP $CONF_GCOV $CONF_GC_DEBUG
                $CONF_LARGE_CONFIG $CONF_M_UNMAP $CONF_REDIRECT $CONF_SHARED
                $CONF_SINGLE_OBJ $CONF_STATIC $CONF_THREADS --enable-werror &&
      cat include/config.h;
    fi
  - if [[ "$CSA_CHECK" != true && "$CPPCHECK_ENABLE" == "" ]]; then
      make -j -f $MAKEFILE_NAME check $MAKEFILE_EXTRA_TARGETS
           CFLAGS_EXTRA="$CFLAGS_EXTRA";
    fi
  - if [ -f gctest.log ]; then cat gctest.log; fi
  - if [[ "$CSA_CHECK" == true ]]; then
      clang --analyze -Xanalyzer -analyzer-output=text
            -m32 -Werror -I include -I libatomic_ops/src
            *.c *.cc cord/*.c cord/tests/cordtest.c cord/tests/de.c extra/gc.c
            extra/msvc_dbg.c tests/*.c tests/*.cc tools/*.c &&
      clang --analyze -Xanalyzer -analyzer-output=text
            -Werror -I include -I libatomic_ops/src
            -D ALL_INTERIOR_POINTERS -D CHECKSUMS -D DBG_HDRS_ALL
            -D DEBUG_THREADS -D ENABLE_TRACE -D GC_ALWAYS_MULTITHREADED
            -D GC_ASSERTIONS -D GC_ATOMIC_UNCOLLECTABLE
            -D GC_ENABLE_SUSPEND_THREAD -D GC_GCJ_SUPPORT
            -D GC_PRINT_BACK_HEIGHT -D GC_THREADS -D HANDLE_FORK
            -D JAVA_FINALIZATION -D KEEP_BACK_PTRS -D MAKE_BACK_GRAPH
            -D PARALLEL_MARK -D PRINT_BLACK_LIST -D THREAD_LOCAL_ALLOC
            -D USE_MMAP -D USE_MUNMAP
            *.c *.cc cord/*.c cord/tests/cordtest.c cord/tests/de.c extra/gc.c
            extra/msvc_dbg.c tests/*.c tests/*.cc tools/*.c;
    fi
  - if [[ "$CPPCHECK_ENABLE" != "" ]]; then
      ~/cppcheck/cppcheck -f --error-exitcode=2 -U long -D CPPCHECK
                -I include -I libatomic_ops/src $CPPCHECK_ENABLE
                *.cc cord/*.c cord/tests/*.c extra/*.c extra/*.cpp
                tests/*.c tests/*.cc tools/*.c;
    fi
  - if [[ "$MSAN_OR_UBSAN" == true ]]; then
      UBSAN_OPTIONS="halt_on_error=1" make check-without-test-driver;
    fi

after_success:
  - if [[ "$CONF_GCOV" == --en* ]]; then
      lcov --capture --base-directory . --directory . --output-file coverage.info;
      lcov --remove coverage.info '/usr/*' 'cord/tests/*' 'libatomic_ops/*' 'tests/*' --output-file coverage.info;
      lcov --list coverage.info;
      coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi
