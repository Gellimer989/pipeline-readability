if: branch = test_travis_ci

language: cpp

env:
  global:
    - SHADOW_BUILD_DIR=/tmp/shadow_build_dir
    - CONFIG=installer

git:
  depth: false
  submodules: false

.template_linux: &template_linux
  os: linux
  dist: xenial
  services: docker
  sudo: required
  before_install:
    - docker build -f deploy/${DOCKERFILE} -t builder .
    - docker run builder --name build_container -td ${DOCKERFILE} /bin/bash
  script:
    - docker exec -it build_container bash -c "lsb_release -a"

matrix:
  fast_finish: true
  include:
    - name: Linux Installer
      <<: *template_linux
      env: DOCKERFILE=Dockerfile_linux
    - name: CentOS Installer
      <<: *template_linux
      env: DOCKERFILE=Dockerfile_centos
      script:
        - docker exec -it build_container bash -c "cat /etc/centos-release"
    - name: Android Installer
      <<: *template_linux
      env: DOCKERFILE=Dockerfile_android
  exclude:
    - name: Linux Debug
      <<: *template_linux
      env: CONFIG=debug
      services: xvfb
    - name: OSX Installer
      os: osx
      osx_image: xcode9.2


before_install:
  # inject CI User github OAuth Token
  - echo -e "machine github.com\n  login $CI_USER_TOKEN" > ~/.netrc
  - git submodule update --init --recursive

install:
#  # linux dependencies: qt
#  - if [ "${SPEC}" = "linux-g++-64" ]; then
#    wget --quiet https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.11.3-gcc_64-min.tar.bz2 &&
#    tar jxf Qt5.11.3-gcc_64-min.tar.bz2 -C /tmp &&
#    export PATH=/tmp/Qt5.11-gcc_64/5.11.3/gcc_64/bin:$PATH;
#    fi
#  # android dependencies: qt, gstreamer, android-ndk
#  - if [ "${SPEC}" = "android-clang" ]; then
#    wget --quiet https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/gstreamer-1.0-android-universal-1.14.4.tar.bz2 &&
#    tar jxf gstreamer-1.0-android-universal-1.14.4.tar.bz2 -C ${TRAVIS_BUILD_DIR} &&
#    wget --quiet https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip &&
#    unzip android-ndk-r20-linux-x86_64.zip > /dev/null &&
#    export ANDROID_NDK_ROOT=`pwd`/android-ndk-r20 &&
#    export ANDROID_SDK_ROOT=/usr/local/android-sdk &&
#    export PATH=`pwd`/android-ndk-r20:$PATH;
#    fi
#  - if [[ "${SPEC}" = "android-clang" && "${BITNESS}" = "64" ]]; then
#    wget --quiet https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.12.4-android_arm64_v8a-min.tar.bz2 &&
#    tar jxf Qt5.12.4-android_arm64_v8a-min.tar.bz2 -C /tmp &&
#    export PATH=/tmp/Qt5.12-android_arm64_v8a/5.12.4/android_arm64_v8a/bin:$PATH;
#    fi
#  - if [[ "${SPEC}" = "android-clang" && "${BITNESS}" = "32" ]]; then
#    wget --quiet https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.12.4-android_armv7-min.tar.bz2 &&
#    tar jxf Qt5.12.4-android_armv7-min.tar.bz2 -C /tmp &&
#    export PATH=/tmp/Qt5.12-android_armv7/5.12.4/android_armv7/bin:$PATH;
#    fi
#
#  # osx dependencies: qt (master builds only: gstreamer, gstreamer-devel)
#  - if [ "${SPEC}" = "macx-clang" ]; then
#    wget --quiet https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.11.0-clang_64-min.tar.bz2 &&
#    tar jxf Qt5.11.0-clang_64-min.tar.bz2 -C /tmp;
#    fi
#  - if [[ "${SPEC}" = "macx-clang" ]]; then
#    wget --quiet https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/osx-gstreamer.tar.bz2 &&
#    sudo tar jxf osx-gstreamer.tar.bz2 -C /Library/Frameworks;
#    fi
#  - if [ "${SPEC}" = "macx-clang" ]; then
#    export QT_DIR=Qt5.11-clang_64/5.11.0/clang_64 &&
#    export QT_QPA_PLATFORM_PLUGIN_PATH=/tmp/$QT_DIR/plugins &&
#    export QML2_IMPORT_PATH=/tmp/$QT_DIR/qml &&
#    export PATH=/tmp/$QT_DIR/bin:$PATH;
#    fi
#
#  # ios dependencies: qt
#  - if [ "${SPEC}" = "macx-ios-clang" ]; then
#    wget --quiet https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies/Qt5.9.3-ios-min.tar.bz2;
#    fi
#  - if [ "${SPEC}" = "macx-ios-clang" ]; then
#    tar jxf Qt5.9.3-ios-min.tar.bz2 -C /tmp &&
#    export IOS_CCACHE_CC=`/usr/bin/xcrun -sdk iphoneos -find clang` &&
#    export IOS_CCACHE_CXX=`/usr/bin/xcrun sdk iphoneos -find clang++` &&
#    export PATH=/tmp/Qt5.9-ios/5.9.3/ios/bin:$PATH;
#    fi

before_script:
#  - cd ${TRAVIS_BUILD_DIR}
#  # insert QGC version in AndroidManifest.xml
#  - if [ "${SPEC}" = "android-clang" ]; then
#    git remote set-branches origin 'master' &&
#    git fetch --tags origin master &&
#    ./tools/update_android_version.sh ${BITNESS};
#    fi

script:
#  # run qmake
#  - mkdir ${SHADOW_BUILD_DIR} && cd ${SHADOW_BUILD_DIR}
#  # Due to possible bug in Qt 5.11 WarningsAsErrorsOn is off for Linux builds. Hopefully back on once that is resolved.
#  - if [ "${SPEC}" = "macx-clang" ]; then
#    qmake -r ${TRAVIS_BUILD_DIR}/qgroundcontrol.pro CONFIG+=${CONFIG} CONFIG+=WarningsAsErrorsOn -spec ${SPEC};
#    else
#    qmake -r ${TRAVIS_BUILD_DIR}/qgroundcontrol.pro CONFIG+=${CONFIG} -spec ${SPEC};
#    fi
#
#  # compile
#  - if [ "${SPEC}" != "macx-ios-clang" ]; then
#    make;
#    else
#    xcodebuild -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcpretty -c && $(exit ${PIPESTATUS[0]});
#    fi
#
#  # unit tests linux
#  - if [[ "${SPEC}" = "linux-g++-64" && "${CONFIG}" = "debug" ]]; then
#    mkdir -p ~/.config/QtProject/ &&
#    cp ${TRAVIS_BUILD_DIR}/test/qtlogging.ini ~/.config/QtProject/ &&
#    export QT_FATAL_WARNINGS=1 &&
#    ./debug/qgroundcontrol-start.sh --unittest;
#    fi

before_deploy:
#  # create linux appimage
#  - cd ${TRAVIS_BUILD_DIR}
#  - if [[ "${SPEC}" = "linux-g++-64" && "${CONFIG}" = "installer" ]]; then
#    ./deploy/create_linux_appimage.sh ${TRAVIS_BUILD_DIR} ${SHADOW_BUILD_DIR}/release ${SHADOW_BUILD_DIR}/release/package;
#    fi

deploy:
  provider: releases
  api_key:
    secure: pPLTR3o8zgPwzbDH6C2Z1qHXtDxpSTtPT0gT0N4/Emf1d39vkCT0iQKlZjUQL/7CqunC7/9RTauoc8jZh2oSFpVbf2XaJjdUX/yOf0ZWDGEye/FsWi6v7LkwZUlDzT81SPHCRc0AjHvi4WdEjdT4uMuriisDx+pKVl/cg5Ofwfb3FD2nMug1vGImoLU0ue47Uqxwn5XGc76PD1N7zIzNzYs7w4Y1vFVbHZwNrix6uCReYn9I5StIBiVBMBciZHL1Y3dGIiyfnMod29/jfWuL4VsT/u1HDH0sXDv6d3gvPJWXOuA2LWXEy7N+gopVj/NeEDj1XJT04AN9hzPydllqd++PeSk5a1DUpAiYDd8deQB2VUlV6fHIkE92ljkoSb+pO5TNdcPUCpsXl/CH5LncFnPnJG6PRSPBZSkY9QiehtFEzpQRTCCjNeVnY5RgFyqRfXUHBI3NwylRr76J+JJibIwVMYLDguV73/T2noB3gEMDJZYdz1uv3nry6E4CHmsOZdGkHQi6DsbSxIjTI2XL+fpaKS0xaslchv9iyJBDj2YkRcTSfyxhevumWAvoXMB+yp8eH9LhJauL0SYgTdg5dsWUeFImd4BopFhiEbbuN43e/fxU5kUJb2LrMuc22fLPJjG4g7FJMsywmoebAcg90a66jTD8DMJi3A/Nb0KDCVY=
  file_glob: true
  file:
    - ${SHADOW_BUILD_DIR}/release/package/qgroundcontrol.*
    - ${SHADOW_BUILD_DIR}/release/package/QGroundControl.*
  skip_cleanup: true
  on:
    tags: true
    condition: $CONFIG = installer
    repo: Auterion/auterion-qgroundcontrol
    if: branch = master

notifications:
  slack:
    rooms:
      - secure: uKo8OQ2FMGv9sGv6RnQpntbJIZywofPTPVjNLSz2aqectnj5uaMVQGdGCkzXo+yqplSB8K6Wkg5qo4qpOhjLY1PtM3J8YW567S5e9Vl9SxC3SUYalLkdUGbxySEE2lxKdgn25Jt52Gj/Qw8YYfTG9QThXnUaTNJnC7KEIF+P7HgCYxBKF0OOYosB9T7LV2vk3V1ozuPcYCdHbUPOBASlQqWqTN934qjMY67jsOdqZp/NBrzhIyfO5CqUnyJ/gTh3XYdBlXFkEh0clS5h1biPlsGDqXGPJnGeWN2j0OWfkuSVVXZVO54vl1eUIDANt9w/M5ZtJIkr2MKiBk+zqQMaiCK7iS9wogEz2IpwH1mAyH5+Bjb5dcog/hjSB6GJAAdBOVAGn9oJS22n3P7UJ3q2n7kFr/hOSkZSY/Dn3EhfIcISToL71PHFTZeQuN9JT8oAm/9VloRI/HlOXsVieCnQsnywcxzhb0h6k5P8PAsSx6T3gYTNzOo8AdxtKaySEt135vMyTFp2goa1CTJyHF02aPF/68h5p7WcVvWQbKE4YoiBzRfJVYeDtYJ5+TyJFcEv+WEO6O2i7HLCnAUIQG3JhC1IxAxsaPa8TQLVWEro0XkUAdtvOsKVkPl/5uCwwYhhoXys7dFTDm5YwFezDor+suQtYnt+CSxaMMdGdRi6z8s=
    on_success: change
    on_failure: always