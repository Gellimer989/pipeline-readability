language: c++
compiler: clang
os: linux
sudo: false


matrix:
  include:
    ##########################################################################
    # Clang 3.5
    #
    # Note that we use the memory checker only for one Boost version to speed
    # up builds. There would be little benefit to run the memory checker on
    # different Boost versions.
    ##########################################################################
    - env: COMPILER=clang++-3.5 BOOST_VERSION=1.57.0 UNIT_TESTS=true
      addons: &clang35
        apt:
          packages: ["clang-3.5", "valgrind"]
          sources: &sources ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.5", "llvm-toolchain-precise-3.6"]

    - env: COMPILER=clang++-3.5 BOOST_VERSION=1.58.0 UNIT_TESTS=true
      addons: *clang35

    - env: COMPILER=clang++-3.5 BOOST_VERSION=1.59.0 UNIT_TESTS=true ENABLE_MEMCHECK=true
      addons: *clang35

    - env: COMPILER=clang++-3.5 BOOST_VERSION=trunk UNIT_TESTS=true
      addons: *clang35

    ##########################################################################
    # Clang 3.6
    ##########################################################################
    - env: COMPILER=clang++-3.6 BOOST_VERSION=1.57.0 UNIT_TESTS=true
      addons: &clang36
        apt:
          packages: ["clang-3.6", "valgrind"]
          sources: *sources

    - env: COMPILER=clang++-3.6 BOOST_VERSION=1.58.0 UNIT_TESTS=true
      addons: *clang36

    - env: COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 UNIT_TESTS=true ENABLE_MEMCHECK=true
      addons: *clang36

    - env: COMPILER=clang++-3.6 BOOST_VERSION=trunk UNIT_TESTS=true
      addons: *clang36

    ##########################################################################
    # Build without concept checks
    ##########################################################################
    - env: COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 UNIT_TESTS=true DISABLE_CONCEPT_CHECKS=true
      addons: *clang36

    ##########################################################################
    # Build with libstdc++ instead of libc++
    ##########################################################################
    - env: COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 UNIT_TESTS=true STDLIB=libstdc++
      addons:
        apt:
          packages: ["clang-3.6", "g++-5"]
          sources: *sources

    ##########################################################################
    # Benchmarks
    ##########################################################################
    - env: COMPILER=clang++-3.5 BOOST_VERSION=1.59.0 BENCHMARKS=true BUILD_TYPE=Release
      addons: *clang35

    # Clang 3.5 does not support debug info for `auto`, so we use the Default build type instead.
    - env: COMPILER=clang++-3.5 BOOST_VERSION=1.59.0 BENCHMARKS=true
      addons: *clang35

    - env: COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 BENCHMARKS=true BUILD_TYPE=Release
      addons: *clang36

    - env: COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 BENCHMARKS=true BUILD_TYPE=Debug
      addons: *clang36


env:
  global:
    # GitHub token for pushing the documentation, logging in with the
    # Travis command line utility and so on. The token is stored in the
    # ${GITHUB_TOKEN} environment variable.
    - secure: "gikHKTxWGN9FnJ9m+F53Y5j7jWGAOKlL2ylcFM2o0KoXOkoNAK9bJpilNppRwWhgwpC3yTJDN0k7xh9I6Ec8L0G46Q2QZdtJ/NFvWbafpzQcrAg6+872yKlP8h3GHexwEDdAdxCv8g2HeavFrDcqynssI8IoIHyZmsR6Dwym+eo="

  ##########################################################################
  # Documentation
  #
  # The Documentation job must be defined here instead of in matrix.include,
  # because we otherwise end up with a job that has no environment variables
  # at all in the matrix.
  ##########################################################################
  matrix:
    - COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 DOCUMENTATION=true

# Those addons apply only to the documentation job.
addons: *clang36


install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install Boost headers
  ############################################################################
  - if [[ "${BOOST_VERSION}" == "1.57.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.tar.gz"; fi
  - if [[ "${BOOST_VERSION}" == "1.58.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz"; fi
  - if [[ "${BOOST_VERSION}" == "1.59.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz"; fi
  - if [[ "${BOOST_VERSION}" != "trunk" ]]; then mkdir boost && travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C boost; fi

  - |
    if [[ "${BOOST_VERSION}" == "trunk" ]]; then
      BOOST_URL="http://github.com/boostorg/boost.git"
      travis_retry git clone --depth 1 --recursive --quiet ${BOOST_URL}
      (cd boost && ./bootstrap.sh && ./b2 headers)
    fi

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.1-Linux-x86_64.tar.gz"
  - mkdir cmake && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  - export PATH=${DEPS_DIR}/cmake/bin:${PATH}

  ############################################################################
  # Install libc++ and libc++abi
  # Note: We install libc++[abi] 3.6 even with Clang 3.5, because the 3.5
  #       version does not seem to provide <ciso646>, which we require.
  ############################################################################
  - |
    if [[ "${STDLIB}" != "libstdc++" ]]; then
      LLVM_URL="http://llvm.org/releases/3.6.2/llvm-3.6.2.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/3.6.2/libcxx-3.6.2.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/3.6.2/libcxxabi-3.6.2.src.tar.xz"

      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
      travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
      travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_CXX_COMPILER=clang++ && make cxxabi cxx -j2)

      export CXXFLAGS="-I ${DEPS_DIR}/llvm/build/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/build/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/build/lib"
    fi

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.10.linux.bin.tar.gz"
  - mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
  - export PATH=${DEPS_DIR}/doxygen/bin:${PATH}

  ############################################################################
  # Install and use a more recent Ruby and install the gems for the benchmarks
  ############################################################################
  - rvm use 2.1 --install --binary --fuzzy
  - gem install ruby-progressbar tilt


before_script:
  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir build && cd build
  - cmake .. -DCMAKE_CXX_COMPILER=${COMPILER} -DBOOST_ROOT=${DEPS_DIR}/boost -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBOOST_HANA_ENABLE_WERROR=ON
  - if [[ "${ENABLE_MEMCHECK}" == "true" ]]; then cmake .. -DBOOST_HANA_ENABLE_MEMCHECK=ON; fi
  - if [[ "${DISABLE_CONCEPT_CHECKS}" == "true" ]]; then cmake .. -DBOOST_HANA_ENABLE_CONCEPT_CHECKS=OFF; fi


script:
  ############################################################################
  # Only push the documentation when we're on master, otherwise just make sure
  # it builds properly. When we push, we disable the output to avoid leaking
  # the GitHub token.
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
        make gh-pages.push &>/dev/null
      else
        make doc
      fi
    fi

  ############################################################################
  # We only run the full benchmarks on `master` when we're not in a pull
  # request, because otherwise it takes too much Travis resources.
  # Otherwise, partial benchmarks are run automatically as part of the
  # tests to make sure they compile and run properly.
  #
  # When we run the full benchmarks, we pre-clone the datasets branch so the
  # next datasets.clone will just pull, which is pretty quick. This reduces
  # the risk of push conflicts when these jobs all run at the same time. When
  # we push, we use travis_retry to try again if we encounter a push conflict,
  # and we disable the output to avoid leaking the GitHub token.
  ############################################################################
  - |
    if [[ "${BENCHMARKS}" == "true" && "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
      make benchmarks
      make datasets.clone
      travis_retry make datasets.push &>/dev/null
    fi

  ############################################################################
  # Build and run the unit tests and examples.
  ############################################################################
  - |
    if [[ "${UNIT_TESTS}" == "true" ]]; then
      export CTEST_PARALLEL_LEVEL=2 # Run unit tests on two cores
      make examples -k -j2 &>/dev/null
      make tests.quick -k -j2 &>/dev/null
      make tests -k -j2
      make check -k
    fi


notifications:
  webhooks:
    urls: https://webhooks.gitter.im/e/ce1e3a2036d94b4a644f
    on_success: change
    on_failure: always
