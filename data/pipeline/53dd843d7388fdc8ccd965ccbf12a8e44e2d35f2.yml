language: python


python:
    - 2.7
    - 3.2
    # Note that these are *only* for the "default" versions - somthing from python 2.x and 3.x
    # for each we do an 'egg_info' build and a build with all the optional dependencies.  We
    # do the latter first because they take the longest.  Testing of all other versions (without
    # optional dependencies) happens in the "include" section below
env:
    - NUMPY_VERSION=1.7.1 SETUP_CMD='test' OPTIONAL_DEPS=true
    - NUMPY_VERSION=1.7.1 SETUP_CMD='egg_info' OPTIONAL_DEPS=false

matrix:
    include:
        # Check for sphinx doc build warnings - we do this first because it runs for a long time
        - python: 2.7
          # OPTIONAL_DEPS needed because the plot_directive in sphinx needs them
          env: NUMPY_VERSION=1.7.1 SETUP_CMD='build_sphinx -w -n' OPTIONAL_DEPS=true

        # try all python versions with the latest numpy
        - python: 2.7
          env: NUMPY_VERSION=1.7.1 SETUP_CMD='test' OPTIONAL_DEPS=false
        - python: 2.6
          env: NUMPY_VERSION=1.7.1 SETUP_CMD='test' OPTIONAL_DEPS=false
        - python: 3.3
          env: NUMPY_VERSION=1.7.1 SETUP_CMD='test' OPTIONAL_DEPS=false
        - python: 3.2
          env: NUMPY_VERSION=1.7.1 SETUP_CMD='test' OPTIONAL_DEPS=false

        # try alternate numpy versions
        - python: 2.7
          env: NUMPY_VERSION=1.6.2 SETUP_CMD='test' OPTIONAL_DEPS=false
        - python: 2.7
          env: NUMPY_VERSION=1.5.1 SETUP_CMD='test' OPTIONAL_DEPS=false
        - python: 3.2
          env: NUMPY_VERSION=1.6.2 SETUP_CMD='test' OPTIONAL_DEPS=false
        # numpy < 1.6 does not work on py 3.x


before_install:
    # use utf8 encoding.  Should be default, but this is insurance against future changes
    - export PYTHONIOENCODING=UTF8

    # install the pip that supports wheel - this should be set to the first pip  *release* that supports wheel, whenever that is
    - pip install -e git+https://github.com/pypa/pip#egg=pip
    - pip install wheel

    # We do this to make sure we get dependencies so pip works below
    # Note that travis does *not* use python packages installed via apt - it does all the building in an isolated virtualenv
    - sudo apt-get update -qq
    - if [[ $SETUP_CMD != egg_info ]]; then sudo apt-get install -qq python-numpy cython libatlas-dev liblapack-dev gfortran; fi
    - if $OPTIONAL_DEPS; then sudo apt-get install -qq python-scipy libhdf5-serial-1.8.4 libhdf5-serial-dev; fi
    - if [[ $SETUP_CMD == build_sphinx* ]]; then sudo apt-get install -qq python-sphinx graphviz texlive-latex-extra dvipng python-matplotlib; fi


install:
    # these command run pip first trying a wheel, and then falling back on source build
    # see .travis.pip.wheel for details on how to map from package to wheel URL
    - if [[ $SETUP_CMD != egg_info ]]; then bash .travis.pip.wheel $TRAVIS_PYTHON_VERSION numpy $NUMPY_VERSION -q; fi
    - if [[ $SETUP_CMD != egg_info ]]; then bash .travis.pip.wheel $TRAVIS_PYTHON_VERSION Cython 0.18 -q; fi
    - if $OPTIONAL_DEPS; then bash .travis.pip.wheel $TRAVIS_PYTHON_VERSION scipy 0.12.0; fi
      # not doing -q in scipy because if we have to fall back on the source build it takes too long and travis times out without continuous output
    - if $OPTIONAL_DEPS; then bash .travis.pip.wheel $TRAVIS_PYTHON_VERSION h5py -q; fi

    # build_sphinx needs sphinx and matplotlib (for plot_directive)
    - if [[ $SETUP_CMD == build_sphinx* ]]; then bash .travis.pip.wheel $TRAVIS_PYTHON_VERSION sphinx 1.1.3 -q; fi
    - if [[ $SETUP_CMD == build_sphinx* ]]; then bash .travis.pip.wheel $TRAVIS_PYTHON_VERSION matplotlib -q; fi
      # this matplotlib will *not* work with py 3.x, but our sphinx build is currently 2.7, so that's fine

script:
   - export OPEN_FILES=""
   - if [[ $TRAVIS_PYTHON_VERSION == "2.7" ]] || [[ $TRAVIS_PYTHON_VERSION == "3.2" ]] && [[ $NUMPY_VERSION == "1.6.2" ]] && [[ $SETUP_CMD == "test" ]]; then export OPEN_FILES=--open-files; fi
   - python setup.py $SETUP_CMD $OPEN_FILES
